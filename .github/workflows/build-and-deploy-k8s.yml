on:
  workflow_call:
    inputs:
      DOCKERFILE_NAME:
        default: "Dockerfile"
        required: false
        type: string
      APP_VERSION:
        required: true
        type: string
      PACKAGE_NAME:
        required: true
        type: string
      K8S_OBJECT:
        required: true
        type: string
      K8S_NAME:
        required: true
        type: string
      K8S_RG_NAME:
        required: true
        type: string
      K8S_NAMESPACE:
        required: true
        type: string
      AZ_REGISTRY_URL:
        required: true
        type: string
    secrets:
      DEPLOY_TOKEN:
        required: false
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      AZURE_CREDENTIALS:
        required: true
      

# Environment variables available to all jobs and steps in this workflow
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout with dependencies
      uses: actions/checkout@v3
      env:
        DEPLOY_TOKEN: '${{ secrets.DEPLOY_TOKEN }}'
      if: "${{ env.DEPLOY_TOKEN != '' }}"
      with:
        token: '${{ secrets.DEPLOY_TOKEN }}'
        submodules: 'recursive'
        
    - name: Checkout without dependencies
      uses: actions/checkout@v3
      env:
        DEPLOY_TOKEN: '${{ secrets.DEPLOY_TOKEN }}'
      if: "${{ env.DEPLOY_TOKEN == '' }}"
    
    # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ inputs.AZ_REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    # Set the target Azure Kubernetes Service (AKS) cluster.
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Container build and push to a Azure Container Registry (ACR)        
    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az acr list
          echo az acr build -t ${{ env.AZ_REGISTRY_URL }}/${{ env.PACKAGE_NAME }}:${{ env.APP_VERSION }} -r $(echo ${{ env.AZ_REGISTRY_URL }} | cut -d. -f1) -f ${{ env.DOCKERFILE_NAME }} .
   #- run: |
    #    docker build . -t ${{ inputs.AZ_REGISTRY_URL }}/${{ inputs.PACKAGE_NAME }}:${{ inputs.APP_VERSION }} -f ./${{ inputs.DOCKERFILE_NAME }}
    #    docker push ${{ inputs.AZ_REGISTRY_URL }}/${{ inputs.PACKAGE_NAME }}:${{ inputs.APP_VERSION }}

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Set up kubelogin for non-interactive login
      run: |
        curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.18/kubelogin-linux-amd64.zip
        sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
        rm -f kubelogin-linux-amd64.zip
        kubelogin --version

    - uses: azure/aks-set-context@v2
      with:
        cluster-name: ${{ inputs.K8S_NAME }}
        resource-group: ${{ inputs.K8S_RG_NAME }}
        use-kubelogin: true
        
    # Deploy app to AKS
    - run: | #add fallback when object does not exist to build from manifests maybe?
        kubectl -n ${{ inputs.K8S_NAMESPACE }} get ${{ inputs.K8S_OBJECT }} -oyaml | sed -e "s#\(${{ inputs.AZ_REGISTRY_URL }}/.*:\).*#\1${{ inputs.APP_VERSION }}#ig" | kubectl -n ${{ inputs.K8S_NAMESPACE }} apply -f -
